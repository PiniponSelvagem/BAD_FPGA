#include <stdio.h>
#include <string.h>

#include "utils/types.h"
#include "utils/conv2d_settings.h"

#include "data/data_input.h"
#include "data/data_output.h"

#include "conv2d/conv2d.h"


void special_print(convval out, convval difference, convval exp) {
    char difference_str[50];
    // Use snprintf to format difference as a string with 4 digits after the decimal point
    snprintf(difference_str, sizeof(difference_str), "%.12f", difference);

    // Loop through the string and replace '0' characters with '_'
    for (int i = 0; i < strlen(difference_str); i++) {
        if (difference_str[i] == '0') {
            difference_str[i] = '_';
        }
    }

    // Print the formatted string with underscores
    printf(" %15.12f | %15s | %15.12f\n", out, difference_str, exp);
}

const convval input_test[3][40] = {
    { 0.4088122546672821,
                    0.36376163363456726,
                    0.3371202051639557,
                    0.3260878324508667,
                    0.32252201437950134,
                    0.31597840785980225,
                    0.3035290241241455,
                    0.30061331391334534,
                    0.2990260720252991,
                    0.2947119474411011,
                    0.30334997177124023,
                    0.30091890692710876,
                    0.2919968068599701,
                    0.28386029601097107,
                    0.28293249011039734,
                    0.28917503356933594,
                    0.287249356508255,
                    0.2796086072921753,
                    0.2832214832305908,
                    0.2718854546546936,
                    0.26436206698417664,
                    0.25617414712905884,
                    0.2534763514995575,
                    0.2642114460468292,
                    0.2856537401676178,
                    0.30729958415031433,
                    0.2808648347854614,
                    0.2814980149269104,
                    0.26335078477859497,
                    0.24001231789588928,
                    0.2388746738433838,
                    0.23769645392894745,
                    0.2333073914051056,
                    0.23411940038204193,
                    0.23392510414123535,
                    0.23198212683200836,
                    0.22919346392154694,
                    0.23495255410671234,
                    0.23381924629211426,
                    0.2280905693769455 },
    { 0.43059587478637695,
                    0.3530774414539337,
                    0.32556959986686707,
                    0.3261045217514038,
                    0.2837671637535095,
                    0.30464744567871094,
                    0.30718544125556946,
                    0.29065459966659546,
                    0.3010511100292206,
                    0.29501864314079285,
                    0.29170703887939453,
                    0.2819252908229828,
                    0.26966655254364014,
                    0.26739317178726196,
                    0.2710159122943878,
                    0.2672443389892578,
                    0.2584846317768097,
                    0.26192647218704224,
                    0.26060324907302856,
                    0.25041985511779785,
                    0.24942560493946075,
                    0.2578992247581482,
                    0.26344871520996094,
                    0.26855233311653137,
                    0.29948946833610535,
                    0.3176243305206299,
                    0.33201420307159424,
                    0.2978932559490204,
                    0.2619068920612335,
                    0.24146735668182373,
                    0.23900391161441803,
                    0.23574666678905487,
                    0.24101917445659637,
                    0.24110868573188782,
                    0.24520470201969147,
                    0.23944400250911713,
                    0.23789598047733307,
                    0.2384185791015625,
                    0.24101728200912476,
                    0.23745416104793549 },
    { 0.4191008508205414,
                    0.343282014131546,
                    0.33097395300865173,
                    0.32841169834136963,
                    0.303046315908432,
                    0.2908398509025574,
                    0.297664999961853,
                    0.3019231855869293,
                    0.2916824519634247,
                    0.29812172055244446,
                    0.2953202724456787,
                    0.2714618146419525,
                    0.2756187915802002,
                    0.27723827958106995,
                    0.27089723944664,
                    0.2704803943634033,
                    0.2748492658138275,
                    0.2594829797744751,
                    0.2547508180141449,
                    0.2608259916305542,
                    0.2581561207771301,
                    0.28365129232406616,
                    0.2876574993133545,
                    0.2890326678752899,
                    0.3488028943538666,
                    0.3842429220676422,
                    0.35683009028434753,
                    0.2786742150783539,
                    0.24615226686000824,
                    0.24293415248394012,
                    0.2461903691291809,
                    0.24272587895393372,
                    0.24988220632076263,
                    0.24614228308200836,
                    0.24455034732818604,
                    0.24263428151607513,
                    0.24221457540988922,
                    0.24021971225738525,
                    0.23737332224845886,
                    0.23782303929328918 }
};
convval input_test_p[3 + 2][40 + 2];
const convval weights_test[3][3] = {
    { 0.029623493552207947, -0.05585840716958046,   0.005694271996617317  },
    { 0.04749192297458649,  -0.0020606843754649162, 0.0049833981320261955 },
    { 0.025802062824368477, -0.06978029757738113,   0.025392645969986916  }
};
const convval bias_test = 0.02698972076177597;

convval output_p[3 + 2][40 + 2] = { 0.0 };
convval output[3][40] = { 0.0 };

#define OUT_MAX_PRINT 2

void tensorflow_conv2d() {
    conv2d_preprocess(input_test, input_test_p);
    conv2d(input_test_p, weights_test, bias_test, output_p);
    conv2d_postprocess(output_p, output);

    printf("#### ALL ####\n");
    for (int h = 0; h < C2D_1_IHEIGHT; ++h) {
        for (int w = 0; w < C2D_1_IWIDTH; ++w) {
            printf("%.6f ", output_p[h][w]);
        }
        printf("\n");
    }
    printf("\n#### ACTUAL after postprocess ####\n");
    for (int h = 0; h < IHEIGHT; ++h) {
        for (int w = 0; w < IWIDTH; ++w) {
            printf("%.6f ", output[h][w]);
        }
        printf("\n");
    }

    /*
    // Print the output values
    printf("      OUTPUT            --VS--            EXPECTED\n");
    for (int outter = 0; outter < OUT_MAX_PRINT; ++outter) {
        printf("[%3d] ##############################################\n", outter);
        for (int i = 0; i < INPUT_SIZE; i++) {
            convval out = output[outter][i];
            convval exp = output_expected[outter][i];
            convval difference = out - exp;
            //printf(" %15.12f | %7.4f | %15.12f\n", out, difference, exp);
            special_print(out, difference, exp);
        }
        printf("\n");
    }
    */
}


int main() {

    tensorflow_conv2d();

    return 0;
}
