#pragma once

#ifndef TANH_H
#define TANH_H

#include <math.h>

// Taken from: https://github.com/xiph/rnnoise/blob/master/src/rnn.c

/* Copyright (c) 2008-2011 Octasic Inc.
                 2012-2017 Jean-Marc Valin */
/*
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

static const float tansig_table[201] = {
    0.000000f, 0.039979f, 0.079830f, 0.119427f, 0.158649f,
    0.197375f, 0.235496f, 0.272905f, 0.309507f, 0.345214f,
    0.379949f, 0.413644f, 0.446244f, 0.477700f, 0.507977f,
    0.537050f, 0.564900f, 0.591519f, 0.616909f, 0.641077f,
    0.664037f, 0.685809f, 0.706419f, 0.725897f, 0.744277f,
    0.761594f, 0.777888f, 0.793199f, 0.807569f, 0.821040f,
    0.833655f, 0.845456f, 0.856485f, 0.866784f, 0.876393f,
    0.885352f, 0.893698f, 0.901468f, 0.908698f, 0.915420f,
    0.921669f, 0.927473f, 0.932862f, 0.937863f, 0.942503f,
    0.946806f, 0.950795f, 0.954492f, 0.957917f, 0.961090f,
    0.964028f, 0.966747f, 0.969265f, 0.971594f, 0.973749f,
    0.975743f, 0.977587f, 0.979293f, 0.980869f, 0.982327f,
    0.983675f, 0.984921f, 0.986072f, 0.987136f, 0.988119f,
    0.989027f, 0.989867f, 0.990642f, 0.991359f, 0.992020f,
    0.992631f, 0.993196f, 0.993718f, 0.994199f, 0.994644f,
    0.995055f, 0.995434f, 0.995784f, 0.996108f, 0.996407f,
    0.996682f, 0.996937f, 0.997172f, 0.997389f, 0.997590f,
    0.997775f, 0.997946f, 0.998104f, 0.998249f, 0.998384f,
    0.998508f, 0.998623f, 0.998728f, 0.998826f, 0.998916f,
    0.999000f, 0.999076f, 0.999147f, 0.999213f, 0.999273f,
    0.999329f, 0.999381f, 0.999428f, 0.999472f, 0.999513f,
    0.999550f, 0.999585f, 0.999617f, 0.999646f, 0.999673f,
    0.999699f, 0.999722f, 0.999743f, 0.999763f, 0.999781f,
    0.999798f, 0.999813f, 0.999828f, 0.999841f, 0.999853f,
    0.999865f, 0.999875f, 0.999885f, 0.999893f, 0.999902f,
    0.999909f, 0.999916f, 0.999923f, 0.999929f, 0.999934f,
    0.999939f, 0.999944f, 0.999948f, 0.999952f, 0.999956f,
    0.999959f, 0.999962f, 0.999965f, 0.999968f, 0.999970f,
    0.999973f, 0.999975f, 0.999977f, 0.999978f, 0.999980f,
    0.999982f, 0.999983f, 0.999984f, 0.999986f, 0.999987f,
    0.999988f, 0.999989f, 0.999990f, 0.999990f, 0.999991f,
    0.999992f, 0.999992f, 0.999993f, 0.999994f, 0.999994f,
    0.999994f, 0.999995f, 0.999995f, 0.999996f, 0.999996f,
    0.999996f, 0.999997f, 0.999997f, 0.999997f, 0.999997f,
    0.999997f, 0.999998f, 0.999998f, 0.999998f, 0.999998f,
    0.999998f, 0.999998f, 0.999999f, 0.999999f, 0.999999f,
    0.999999f, 0.999999f, 0.999999f, 0.999999f, 0.999999f,
    0.999999f, 0.999999f, 0.999999f, 0.999999f, 0.999999f,
    1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
    1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
    1.000000f,
};

static const double tansigd_table[201] = {
    0.000000000000000000, 0.039978680311163570, 0.079829769111131363, 0.119427298534385884, 0.158648504297498910,
    0.197375320224904005, 0.235495749538497945, 0.272905080563132729, 0.309506921212638453, 0.345214034135520875,
    0.379948962255224898, 0.413644442187135142, 0.446243610248779621, 0.477700012168498001, 0.507977432897896208,
    0.537049566998035299, 0.564899552846225061, 0.591519395431816530, 0.616909302877065024, 0.641076961185346406,
    0.664036770267848908, 0.685809062229094546, 0.706419320397235317, 0.725897414849080658, 0.744276867361837291,
    0.761594155955764851, 0.777888066577184900, 0.793199097083500893, 0.807568916578614404, 0.821039881332877086,
    0.833654607012155213, 0.845455595726680276, 0.856484915472497388, 0.866783928849818697, 0.876393067472822862,
    0.885351648202262531, 0.893697727203872527, 0.901467987831946704, 0.908697658431112609, 0.915420456315932385,
    0.921668554406471330, 0.927472567250703372, 0.932861553437034918, 0.937863031680665205, 0.942503008146920007,
    0.946806012846268308, 0.950795143194521186, 0.954492113074392079, 0.957917305959063436, 0.961089830863613881,
    0.964027580075816903, 0.966747287784236797, 0.969264588869448884, 0.971594077254617772, 0.973749363325794426,
    0.975743130031451522, 0.977587187356314224, 0.979292524937816489, 0.980869362655816701, 0.982327199078784519,
    0.983674857693680238, 0.984920530883253265, 0.986071821644475821, 0.987135783066162675, 0.988118955603319304,
    0.989027402201099193, 0.989866741333067512, 0.990642178027298592, 0.991358532960176175, 0.992020269702011848,
    0.992631520201127993, 0.993196108594165517, 0.993717573430341172, 0.994199188396431621, 0.994643981627573726,
    0.995054753686730464, 0.995434094292993898, 0.995784397875913552, 0.996107878029828919, 0.996406580938843156,
    0.996682397839651180, 0.996937076585993398, 0.997172232375078682, 0.997389357692946454, 0.997589831532442073,
    0.997774927934279354, 0.997945823898577000, 0.998103606711292501, 0.998249280727141475, 0.998383773647887662,
    0.998507942332326648, 0.998622578171853514, 0.998728412063209503, 0.998826119007838353, 0.998916322365245413,
    0.998999597785840909, 0.999076476846951889, 0.999147450414009985, 0.999212971747347023, 0.999273459373563822,
    0.999329299739067034, 0.999380849662088955, 0.999428438598316204, 0.999472370734143412, 0.999512926920536504,
    0.999550366459533435, 0.999584928754515212, 0.999616834834557433, 0.999646288762400026, 0.999673478934863913,
    0.999698579283880506, 0.999721750385686891, 0.999743140485173654, 0.999762886441844301, 0.999781114603358945,
    0.999797941612184493, 0.999813475150452380, 0.999827814627744837, 0.999841051816165449, 0.999853271436724422,
    0.999864551700760495, 0.999874964809838507, 0.999884577417300302, 0.999893451054404192, 0.999901642523764345,
    0.999909204262595108, 0.999916184678074194, 0.999922628456960449, 0.999928576851440876, 0.999934067943029192,
    0.999939136886198843, 0.999943816133305408, 0.999948135642233837, 0.999952123068095999, 0.999955803940202781,
    0.999959201825440180, 0.999962338479094437, 0.999965233984088764, 0.999967906879522195, 0.999970374279330554,
    0.999972651981830829, 0.999974754570846058, 0.999976695509059876, 0.999978487224196355, 0.999980141188576477,
    0.999981667992560275, 0.999983077412344712, 0.999984378472549840, 0.999985579503995470, 0.999986688197035845,
    0.999987711650795585, 0.999988656418620780, 0.999989528550035978, 0.999990333629476758, 0.999991076812043911,
    0.999991762856510369, 0.999992396155789387, 0.999992980765062045, 0.999993520427741256, 0.999994018599440482,
    0.999994478470099590, 0.999994902984409961, 0.999995294860669182, 0.999995656608186123, 0.999995990543348312,
    0.999996298804454287, 0.999996583365404423, 0.999996846048340937, 0.999997088535314882, 0.999997312379056424,
    0.999997519012917779, 0.999997709760050757, 0.999997885841879541, 0.999998048385921545, 0.999998198433007190,
    0.999998336943944688, 0.999998464805672227, 0.999998582836937544, 0.999998691793540284, 0.999998792373171796,
    0.999998885219882783, 0.999998970928207109, 0.999999050046968763, 0.999999123082796593, 0.999999190503367830,
    0.999999252740403244, 0.999999310192431379, 0.999999363227340732, 0.999999412184734870, 0.999999457378107803,
    0.999999499096851041, 0.999999537608106337, 0.999999573158476873, 0.999999605975606221, 0.999999636269635728,
    0.999999664234550334, 0.999999690049420908, 0.999999713879550445, 0.999999735877533102, 0.999999756184230870,
    0.999999774929675844,
};


#define celt_isnan(x) ((x)!=(x))


static inline float tansig_approx(float x) {
    int i;
    float y, dy;
    float sign = 1;
    /* Tests are reversed to catch NaNs */
    if (!(x < 8))
        return 1;
    if (!(x > -8))
        return -1;
#ifndef FIXED_POINT
    /* Another check in case of -ffast-math */
    if (celt_isnan(x))
        return 0;
#endif
    if (x < 0) {
        x = -x;
        sign = -1;
    }
    i = (int)floor(.5f + 25 * x);
    x -= .04f * i;
    y = tansig_table[i];
    dy = 1 - y * y;
    y = y + x * dy * (1 - y * x);
    return sign * y;
}

static inline float tanh(float x) {
    return tansig_approx(x);
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

static inline double tansigd_approx(double x) {
    int i;
    double y, dy;
    double sign = 1;
    /* Tests are reversed to catch NaNs */
    if (!(x < 8))
        return 1;
    if (!(x > -8))
        return -1;
#ifndef FIXED_POINT
    /* Another check in case of -ffast-math */
    if (celt_isnan(x))
        return 0;
#endif
    if (x < 0) {
        x = -x;
        sign = -1;
    }
    i = (int)floor(.5f + 25 * x);
    x -= .04 * i;
    y = tansigd_table[i];
    dy = 1 - y * y;
    y = y + x * dy * (1 - y * x);
    return sign * y;
}

static inline double tanhd(double x) {
    return tansigd_approx(x);
}

#endif